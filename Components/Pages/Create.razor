@page "/create"
@using System.ComponentModel.DataAnnotations
@using Carpass_Profilling.Components.Shared
@using Carpass_Profilling.Data
@using System.IO
@inject NavigationManager navigationManager

@inject UserService userService
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<style>
    .container-fluid {
        max-width: 1400px;
        margin: 0 auto;
    }

    .card {
        border: none;
        box-shadow: 0 0 20px rgba(0,0,0,0.1);
    }

    .card-header {
        background-color: #007bff;
        color: white;
        border-radius: 10px 10px 0 0;
    }

    .image-preview-container {
        width: 200px;
        height: 200px;
        margin: 20px auto;
        border: 2px solid #007bff;
        border-radius: 50%;
        overflow: hidden;
        position: relative;
    }

    .image-preview, .image-preview-placeholder {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .image-preview-placeholder {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #e9ecef;
        color: #6c757d;
        font-size: 48px;
    }

    .image-label {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: rgba(0,0,0,0.5);
        color: white;
        text-align: center;
        padding: 5px;
        font-size: 12px;
    }

    .form-floating > label {
        left: 0.5rem;
    }

    .go-back-icon {
        float: right;
        cursor: pointer;
        font-size: 24px;
        color: white;
        margin-top: 5px;
    }

        .go-back-icon:hover {
            color: #c0c0c0;
        }

</style>

<div class="container-fluid mt-5">
    <div class="row justify-content-center">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h2 class="mb-0">
                        Register New User
                        <i class="bi bi-arrow-left-circle go-back-icon" @onclick="NavigateBack">Go back</i>
                    </h2>
                </div>

                <p></p>
                <div class="card-body">
                    <Alert @ref="alert" />
                    <EditForm Model="Input" OnValidSubmit="RegisterUser">
                        <DataAnnotationsValidator />

                        <div class="row">
                            <div class="col-md-3">
                                <div class="image-preview-container">
                                    @if (!string.IsNullOrEmpty(imageDataUrl))
                                    {
                                        <img src="@imageDataUrl" alt="Profile Image Preview" class="image-preview" />
                                    }
                                    else
                                    {
                                        <div class="image-preview-placeholder">
                                            <i class="bi bi-person-fill"></i>
                                        </div>
                                    }
                                    <div class="image-label">Profile Picture</div>
                                </div>
                                <div class="form-group">
                                    <label for="imageUpload" class="form-label">Upload Image</label>
                                    <InputFile OnChange="OnInputFileChange" class="form-control" id="imageUpload" accept="image/*" />
                                </div>
                            </div>
                            <div class="col-md-9">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <InputText @bind-Value="Input.Name" class="form-control" aria-required="true" id="name" />
                                            <label for="name">Full Name</label>
                                            <ValidationMessage For="() => Input.Name" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <InputSelect @bind-Value="Input.Gender" class="form-select" aria-required="true" id="gender">
                                                <option value="">Select Gender</option>
                                                <option value="Male">Male</option>
                                                <option value="Female">Female</option>
                                                <option value="PreferNotToSay">Prefer not to say</option>
                                            </InputSelect>
                                            <label for="gender">Gender</label>
                                            <ValidationMessage For="() => Input.Gender" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <InputText @bind-Value="Input.Email" class="form-control" aria-required="true" id="email" />
                                            <label for="email">Email Address</label>
                                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <InputText type="password" @bind-Value="Input.Password" class="form-control" aria-required="true" id="password" />
                                            <label for="password">Password</label>
                                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-floating">
                                            <InputSelect @bind-Value="Input.BirthMonth" class="form-select" aria-required="true" id="birthMonth">
                                                <option value="">Month</option>
                                                @for (int i = 1; i <= 12; i++)
                                                {
                                                    <option value="@i">@System.Globalization.DateTimeFormatInfo.CurrentInfo.GetMonthName(i)</option>
                                                }
                                            </InputSelect>
                                            <label for="birthMonth">Birth Month</label>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-floating">
                                            <InputSelect @bind-Value="Input.BirthDay" class="form-select" aria-required="true" id="birthDay">
                                                <option value="">Day</option>
                                                @for (int i = 1; i <= 31; i++)
                                                {
                                                    <option value="@i">@i</option>
                                                }
                                            </InputSelect>
                                            <label for="birthDay">Birth Day</label>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-floating">
                                            <InputSelect @bind-Value="Input.BirthYear" class="form-select" aria-required="true" id="birthYear">
                                                <option value="">Year</option>
                                                @for (int i = DateTime.Now.Year; i >= DateTime.Now.Year - 100; i--)
                                                {
                                                    <option value="@i">@i</option>
                                                }
                                            </InputSelect>
                                            <label for="birthYear">Birth Year</label>
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <ValidationMessage For="() => Input.Birthday" class="text-danger" />
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <InputSelect @bind-Value="Input.Role" class="form-select" aria-required="true" id="role">
                                                <option value="">Select Role</option>
                                                <option value="Admin">Admin</option>
                                                <option value="DefaultUser">Default User</option>
                                            </InputSelect>
                                            <label for="role">User Role</label>
                                            <ValidationMessage For="() => Input.Role" class="text-danger" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <p></p>
                        <div style="background-color: #f8d7da; color: #721c24; padding: 15px; border-left: 5px solid #f5c6cb; border-radius: 5px; font-style: italic;">
                            <span> Data Management: Admins are responsible for ensuring the accuracy, integrity, and confidentiality of the data managed through the Website. Any changes to user data, system settings, or content must be properly documented and performed in compliance with applicable laws and university policies.</span>
                      </div>
                      <p></p>
                        <div class="row mt-4">
                            <div class="col-md-6">
                                <button type="submit" class="btn btn-primary btn-lg w-100">Register</button>
                            </div>
                            <div class="col-md-6">
                                <button type="button" class="btn btn-secondary btn-lg w-100" @onclick="ClearForm">Clear</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Alert alert;
    private InputModel Input { get; set; } = new();
    private byte[] imageData;
    private string imageDataUrl;

    private void NavigateBack()
    {
        navigationManager.NavigateTo("/account");
    }


    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var resizedFile = await file.RequestImageFileAsync("image/jpeg", 800, 600);
            var buffer = new byte[resizedFile.Size];
            await resizedFile.OpenReadStream().ReadAsync(buffer);
            imageData = buffer;

            // Convert the image data to a base64-encoded string
            var base64 = Convert.ToBase64String(imageData);
            imageDataUrl = $"data:{resizedFile.ContentType};base64,{base64}";

            // Force a re-render
            StateHasChanged();
        }
    }

    private async Task RegisterUser()
    {
        try
        {
            // Combine birthday components
            Input.Birthday = $"{Input.BirthYear}-{Input.BirthMonth:D2}-{Input.BirthDay:D2}";

            var user = new User
                {
                    Name = Input.Name,
                    Gender = Input.Gender,
                    Birthday = Input.Birthday,
                    Email = Input.Email,
                    Password = Input.Password,
                    Role = Input.Role,
                    Image = imageData
                };

            Console.WriteLine($"Attempting to save user: {user.Name}, {user.Email}");

            bool result = userService.SaveUser(user);

            if (result)
            {
                Console.WriteLine("User registered successfully");
                alert.ShowSuccess("User registered successfully!");
                ClearForm();
            }
            else
            {
                Console.WriteLine("Registration failed");
                alert.ShowFailed("Registration failed. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred during registration: {ex.Message}");
            alert.ShowFailed($"An error occurred: {ex.Message}");
        }
    }

    private void ClearForm()
    {
        Input = new InputModel();
        imageData = null;
        imageDataUrl = null;
        StateHasChanged();
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Name is required")]
        [StringLength(100, ErrorMessage = "Name must be between 2 and 100 characters", MinimumLength = 2)]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Gender is required")]
        public string Gender { get; set; } = "";

        [Required(ErrorMessage = "Birth month is required")]
        public int BirthMonth { get; set; }

        [Required(ErrorMessage = "Birth day is required")]
        public int BirthDay { get; set; }

        [Required(ErrorMessage = "Birth year is required")]
        public int BirthYear { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, ErrorMessage = "Password must be at least 6 characters long", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "User role is required")]
        public string Role { get; set; } = "";

        public string Birthday { get; set; } = "";
    }
}